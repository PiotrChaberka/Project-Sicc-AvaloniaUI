using Avalonia.Controls;
using Avalonia.Interactivity;
using Microsoft.EntityFrameworkCore;
using Project_SICC.Data;
using System;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;

namespace Project_SICC.Views
{
    public partial class ClientsPageView : UserControl
    {
        private int? currentSelectedId = null;

        public ClientsPageView()
        {
            InitializeComponent();

            EditPanel.IsVisible = false;
            Edit_Revenue.TextChanged += Edit_Revenue_TextChanged;
        }

        private async void OnAddClientClick(object? sender, RoutedEventArgs e)
        {
            try
            {
                string name = Add_Name.Text?.Trim() ?? "";
                string surname = Add_Surname.Text?.Trim() ?? "";
                string pesel = Add_PESEL.Text?.Trim() ?? "";
                string address = Add_Address.Text?.Trim() ?? "";
                string companyType = Add_CompanyType.Text?.Trim() ?? "";
                string revenueStr = Add_Revenue.Text?.Trim() ?? "";

                if (string.IsNullOrWhiteSpace(name) || string.IsNullOrWhiteSpace(surname) ||
                    string.IsNullOrWhiteSpace(pesel) || string.IsNullOrWhiteSpace(address) ||
                    string.IsNullOrWhiteSpace(companyType) ||
                    !decimal.TryParse(revenueStr, NumberStyles.Any, CultureInfo.InvariantCulture, out var revenue))
                {
                    ShowMessage("Please fill all fields correctly. Revenue must be a valid number.");
                    return;
                }

                if (revenue < 0)
                {
                    ShowMessage("Revenue cannot be negative.");
                    return;
                }

                decimal tax = Math.Round(revenue * 0.19m, 2);

                using var db = new AppDbContext();
                
                // Check if client with this PESEL already exists (PESEL should be unique)
                var existingClient = await db.Clients.FirstOrDefaultAsync(c => c.PESEL == pesel);
                if (existingClient != null)
                {
                    ShowMessage($"Client with PESEL '{pesel}' already exists.");
                    return;
                }

                var client = new Client
                {
                    // Id will be auto-generated by the database
                    Name = name,
                    Surname = surname,
                    PESEL = pesel,
                    Address = address,
                    CompanyType = companyType,
                    Revenue = revenue,
                    Tax = tax
                };
                
                db.Clients.Add(client);
                await db.SaveChangesAsync();

                ShowMessage($"Client {name} {surname} added successfully with ID: {client.Id}");
                ClearAddForm();
            }
            catch (Exception ex)
            {
                ShowMessage($"Error adding client: {ex.Message}");
            }
        }

        private async void OnSearchClientClick(object? sender, RoutedEventArgs e)
        {
            try
            {
                string searchInput = Search_Id.Text?.Trim() ?? "";
                if (string.IsNullOrWhiteSpace(searchInput))
                {
                    ShowMessage("Please enter an ID or PESEL to search.");
                    return;
                }

                using var db = new AppDbContext();
                Client? client = null;

                // Try to parse as ID first, then search by PESEL if that fails
                if (int.TryParse(searchInput, out int searchId))
                {
                    client = await db.Clients.FindAsync(searchId);
                }
                
                // If not found by ID, try searching by PESEL
                if (client == null)
                {
                    client = await db.Clients.FirstOrDefaultAsync(c => c.PESEL == searchInput);
                }

                if (client != null)
                {
                    currentSelectedId = client.Id;

                    Display_Id.Text = client.Id.ToString();
                    Display_Name.Text = client.Name;
                    Display_Surname.Text = client.Surname;
                    Display_PESEL.Text = client.PESEL;
                    Display_Address.Text = client.Address;
                    Display_CompanyType.Text = client.CompanyType;
                    Display_Revenue.Text = client.Revenue.ToString("F2", CultureInfo.InvariantCulture);
                    Display_Tax.Text = $"Estimated Tax (19%): ${client.Tax:F2}";

                    Search_ResultPanel.IsVisible = true;
                    EditPanel.IsVisible = false;
                }
                else
                {
                    Search_ResultPanel.IsVisible = false;
                    EditPanel.IsVisible = false;
                    ShowMessage($"Client with ID/PESEL '{searchInput}' not found.");
                    currentSelectedId = null;
                }
            }
            catch (Exception ex)
            {
                ShowMessage($"Error searching for client: {ex.Message}");
                Search_ResultPanel.IsVisible = false;
                EditPanel.IsVisible = false;
                currentSelectedId = null;
            }
        }

        private void OnEditButtonClick(object? sender, RoutedEventArgs e)
        {
            if (!currentSelectedId.HasValue) return;

            Edit_Id.Text = Display_Id.Text;
            Edit_Name.Text = Display_Name.Text;
            Edit_Surname.Text = Display_Surname.Text;
            Edit_PESEL.Text = Display_PESEL.Text;
            Edit_Address.Text = Display_Address.Text;
            Edit_CompanyType.Text = Display_CompanyType.Text;
            Edit_Revenue.Text = Display_Revenue.Text;
            UpdateEditTax();

            EditPanel.IsVisible = true;
        }

        private void Edit_Revenue_TextChanged(object? sender, Avalonia.Controls.TextChangedEventArgs e)
        {
            UpdateEditTax();
        }

        private void UpdateEditTax()
        {
            if (decimal.TryParse(Edit_Revenue.Text?.Trim(), NumberStyles.Any, CultureInfo.InvariantCulture, out var revenue))
            {
                var tax = Math.Round(revenue * 0.19m, 2);
                Edit_Tax.Text = $"${tax:F2}";
            }
            else
            {
                Edit_Tax.Text = "Invalid";
            }
        }

        private async void OnSaveClientClick(object? sender, RoutedEventArgs e)
        {
            try
            {
                if (!currentSelectedId.HasValue) 
                {
                    ShowMessage("No client selected for editing.");
                    return;
                }

                using var db = new AppDbContext();
                var client = await db.Clients.FindAsync(currentSelectedId.Value);

                if (client == null)
                {
                    ShowMessage("Client not found. It may have been deleted.");
                    return;
                }

                // Validate input fields
                string name = Edit_Name.Text?.Trim() ?? "";
                string surname = Edit_Surname.Text?.Trim() ?? "";
                string pesel = Edit_PESEL.Text?.Trim() ?? "";
                string address = Edit_Address.Text?.Trim() ?? "";
                string companyType = Edit_CompanyType.Text?.Trim() ?? "";
                string revenueStr = Edit_Revenue.Text?.Trim() ?? "";

                if (string.IsNullOrWhiteSpace(name) || string.IsNullOrWhiteSpace(surname) ||
                    string.IsNullOrWhiteSpace(pesel) || string.IsNullOrWhiteSpace(address) ||
                    string.IsNullOrWhiteSpace(companyType) ||
                    !decimal.TryParse(revenueStr, NumberStyles.Any, CultureInfo.InvariantCulture, out var revenue))
                {
                    ShowMessage("Please fill all fields correctly. Revenue must be a valid number.");
                    return;
                }

                if (revenue < 0)
                {
                    ShowMessage("Revenue cannot be negative.");
                    return;
                }

                // Check if PESEL is being changed to one that already exists
                if (client.PESEL != pesel)
                {
                    var existingClient = await db.Clients.FirstOrDefaultAsync(c => c.PESEL == pesel && c.Id != currentSelectedId.Value);
                    if (existingClient != null)
                    {
                        ShowMessage($"Another client with PESEL '{pesel}' already exists.");
                        return;
                    }
                }

                // Update client properties
                client.Name = name;
                client.Surname = surname;
                client.PESEL = pesel;
                client.Address = address;
                client.CompanyType = companyType;
                client.Revenue = revenue;
                client.Tax = Math.Round(revenue * 0.19m, 2);

                await db.SaveChangesAsync();

                ShowMessage("Client updated successfully.");

                // Update display
                Display_Name.Text = client.Name;
                Display_Surname.Text = client.Surname;
                Display_PESEL.Text = client.PESEL;
                Display_Address.Text = client.Address;
                Display_CompanyType.Text = client.CompanyType;
                Display_Revenue.Text = client.Revenue.ToString("F2", CultureInfo.InvariantCulture);
                Display_Tax.Text = $"Estimated Tax (19%): ${client.Tax:F2}";

                EditPanel.IsVisible = false;
            }
            catch (Exception ex)
            {
                ShowMessage($"Error updating client: {ex.Message}");
            }
        }

        private async void OnDeleteClientClick(object? sender, RoutedEventArgs e)
        {
            try
            {
                if (!currentSelectedId.HasValue)
                {
                    ShowMessage("No client selected for deletion.");
                    return;
                }

                using var db = new AppDbContext();
                var client = await db.Clients.FindAsync(currentSelectedId.Value);

                if (client != null)
                {
                    db.Clients.Remove(client);
                    await db.SaveChangesAsync();

                    ShowMessage($"Client {client.Name} {client.Surname} (ID: {client.Id}) deleted successfully.");
                    
                    // Clear UI
                    currentSelectedId = null;
                    Search_ResultPanel.IsVisible = false;
                    EditPanel.IsVisible = false;
                    Search_Id.Text = "";
                }
                else
                {
                    ShowMessage("Client not found. It may have already been deleted.");
                }
            }
            catch (Exception ex)
            {
                ShowMessage($"Error deleting client: {ex.Message}");
            }
        }

        private void OnCancelEditClick(object? sender, RoutedEventArgs e)
        {
            EditPanel.IsVisible = false;
        }

        private void ShowMessage(string message)
        {
            // For now, using Console.WriteLine
            // You might want to replace this with a proper message dialog
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] {message}");
            
            // TODO: Consider implementing a proper message display system
            // such as a StatusBar, MessageBox, or Toast notification
        }

        private void ClearAddForm()
        {
            Add_Name.Text = "";
            Add_Surname.Text = "";
            Add_PESEL.Text = "";
            Add_Address.Text = "";
            Add_CompanyType.Text = "";
            Add_Revenue.Text = "";
        }
    }
}